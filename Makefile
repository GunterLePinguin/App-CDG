.PHONY: help build start stop restart logs test test-unit test-integration clean setup

# Variables
COMPOSE_FILE = docker-compose.yml
PROJECT_NAME = cdg-airport

help: ## Afficher l'aide
	@echo "üõ´ Syst√®me de Gestion A√©roport CDG"
	@echo ""
	@echo "Commandes disponibles:"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "  \033[36m%-20s\033[0m %s\n", $$1, $$2}'

setup: ## Configuration initiale du projet
	@echo "üìù Configuration initiale..."
	@cp .env.example .env 2>/dev/null || true
	@echo "‚úÖ Fichier .env cr√©√© (modifiez-le selon vos besoins)"

build: ## Construire les images Docker
	@echo "üèóÔ∏è Construction des images Docker..."
	docker-compose build

start: setup ## D√©marrer tous les services
	@echo "üöÄ D√©marrage du syst√®me CDG..."
	docker-compose up -d
	@echo "‚è≥ Attente du d√©marrage des services..."
	@sleep 10
	@make status
	@echo ""
	@echo "üéâ Syst√®me d√©marr√©!"
	@echo "   ‚Ä¢ API Documentation: http://localhost:8000/docs"
	@echo "   ‚Ä¢ Dashboard:         http://localhost:8501"

stop: ## Arr√™ter tous les services
	@echo "üõë Arr√™t des services..."
	docker-compose down

restart: ## Red√©marrer tous les services
	@echo "üîÑ Red√©marrage des services..."
	docker-compose restart

logs: ## Afficher les logs de tous les services
	docker-compose logs -f

logs-app: ## Afficher les logs de l'API
	docker-compose logs -f app

logs-frontend: ## Afficher les logs du dashboard
	docker-compose logs -f frontend

logs-generator: ## Afficher les logs du g√©n√©rateur
	docker-compose logs -f generator

logs-db: ## Afficher les logs de la base de donn√©es
	docker-compose logs -f db

status: ## Afficher le statut des services
	@echo "üìä Statut des services:"
	@docker-compose ps

test: test-unit ## Lancer tous les tests

test-unit: ## Lancer les tests unitaires
	@echo "üß™ Tests unitaires..."
	docker-compose exec app pytest tests/ -v

test-integration: ## Lancer les tests d'int√©gration
	@echo "üß™ Tests d'int√©gration..."
	@echo "‚ö†Ô∏è Assurez-vous que les services sont d√©marr√©s avec 'make start'"
	python tests/integration/test_full_system.py

test-coverage: ## Tests avec couverture de code
	@echo "üß™ Tests avec couverture..."
	docker-compose exec app pytest tests/ --cov=app --cov-report=html

lint: ## V√©rification du code avec flake8
	@echo "üîç V√©rification du code..."
	docker-compose exec app flake8 app/

format: ## Formatage du code avec black (si install√©)
	@echo "‚ú® Formatage du code..."
	docker-compose exec app black app/ || echo "Black non install√©"

shell-app: ## Ouvrir un shell dans le conteneur API
	docker-compose exec app bash

shell-db: ## Ouvrir un shell dans la base de donn√©es
	docker-compose exec db psql -U cdg_user -d airport

clean: ## Nettoyer les ressources Docker
	@echo "üßπ Nettoyage..."
	docker-compose down -v --remove-orphans
	docker system prune -f

clean-all: ## Nettoyage complet (images, volumes, etc.)
	@echo "üßπ Nettoyage complet..."
	docker-compose down -v --remove-orphans
	docker system prune -af
	docker volume prune -f

backup-db: ## Sauvegarder la base de donn√©es
	@echo "üíæ Sauvegarde de la base de donn√©es..."
	@mkdir -p backups
	docker-compose exec db pg_dump -U cdg_user airport > backups/backup_$(shell date +%Y%m%d_%H%M%S).sql
	@echo "‚úÖ Sauvegarde cr√©√©e dans backups/"

restore-db: ## Restaurer la base de donn√©es (usage: make restore-db FILE=backup.sql)
	@echo "üì• Restauration de la base de donn√©es..."
	@if [ -z "$(FILE)" ]; then echo "‚ùå Sp√©cifiez le fichier: make restore-db FILE=backup.sql"; exit 1; fi
	docker-compose exec -T db psql -U cdg_user airport < $(FILE)
	@echo "‚úÖ Base de donn√©es restaur√©e"

dev-setup: ## Configuration pour le d√©veloppement
	@echo "üõ†Ô∏è Configuration d√©veloppement..."
	@pip install -r requirements/api.txt -r requirements/test.txt || echo "‚ö†Ô∏è Installez les d√©pendances manuellement"
	@echo "‚úÖ Environnement de d√©veloppement pr√™t"

monitoring: ## Afficher les m√©triques des conteneurs
	@echo "üìà M√©triques des conteneurs:"
	docker stats --no-stream

api-health: ## V√©rifier la sant√© de l'API
	@echo "üè• V√©rification de la sant√© de l'API..."
	@curl -s http://localhost:8000/health | python -m json.tool || echo "‚ùå API non accessible"

dashboard-open: ## Ouvrir le dashboard dans le navigateur
	@echo "üåê Ouverture du dashboard..."
	@xdg-open http://localhost:8501 2>/dev/null || open http://localhost:8501 2>/dev/null || echo "Ouvrez http://localhost:8501 dans votre navigateur"

docs-open: ## Ouvrir la documentation API
	@echo "üìñ Ouverture de la documentation API..."
	@xdg-open http://localhost:8000/docs 2>/dev/null || open http://localhost:8000/docs 2>/dev/null || echo "Ouvrez http://localhost:8000/docs dans votre navigateur"

# Commandes de d√©veloppement rapide
dev: start logs ## D√©marrage rapide en mode d√©veloppement

quick-test: ## Test rapide sans rebuild
	docker-compose exec app pytest tests/test_api.py::test_health_check -v

# Aide par d√©faut
default: help
